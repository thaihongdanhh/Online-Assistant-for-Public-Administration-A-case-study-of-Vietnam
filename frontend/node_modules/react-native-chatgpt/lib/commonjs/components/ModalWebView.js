"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var React = _interopRequireWildcard(require("react"));
var _MaterialCommunityIcons = _interopRequireDefault(require("react-native-vector-icons/MaterialCommunityIcons"));
var _hooks = require("@react-native-community/hooks");
var _reactNative = require("react-native");
var _api = require("../api");
var _reactNativeWebview = require("react-native-webview");
var _constants = require("../constants");
var _types = require("../types");
var _useWebViewAnimation = _interopRequireDefault(require("../hooks/useWebViewAnimation"));
var _parseStreamedGptResponse = _interopRequireDefault(require("../utils/parseStreamedGptResponse"));
var _httpCodes = require("../utils/httpCodes");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const ModalWebView = /*#__PURE__*/(0, React.forwardRef)((_ref, ref) => {
  let {
    accessToken,
    onLoginCompleted,
    onAccessTokenChange,
    onAccumulatedResponse,
    onStreamError,
    containerStyles,
    backdropStyles,
    renderCustomCloseIcon
  } = _ref;
  const appState = (0, _hooks.useAppState)();
  const [status, setStatus] = (0, React.useState)('hidden');
  const {
    animatedStyles,
    animateWebView
  } = (0, _useWebViewAnimation.default)({
    onAnimationStart: () => setStatus('animating'),
    onAnimationEnd: mode => setStatus(mode === 'show' ? 'visible' : 'hidden')
  });
  const onWebviewRefChange = (0, React.useCallback)(webviewRef => {
    if (webviewRef) {
      (0, _api.init)(webviewRef);
    }
  }, []);
  (0, React.useImperativeHandle)(ref, () => ({
    open: () => {
      animateWebView('show');
    }
  }));
  (0, React.useEffect)(() => {
    if (status === 'visible') {
      // Check if the page shown is ChatGPT is at full capacity.
      // If it is, we can reload the page at intervals to check if it's available again.
      (0, _api.checkFullCapacity)();
    }
  }, [status]);
  const getCurrentStatus = () => status;
  (0, React.useEffect)(() => {
    const currentStatus = getCurrentStatus();
    if (appState === 'active' && currentStatus === 'hidden') {
      // Proactively reload the webview when the app is foregrounded
      // to refresh the CloudFare session cookies.
      (0, _api.reloadWebView)();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [appState]);
  (0, _hooks.useBackHandler)(() => {
    if (status !== 'hidden') {
      // Handle it
      closeModal();
      return true;
    }
    // Let the default thing happen
    return false;
  });
  function closeModal() {
    animateWebView('hide');
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(_reactNative.Animated.View, {
    style: [styles.container, animatedStyles.webview, {
      display: status === 'hidden' ? 'none' : 'flex'
    }, containerStyles]
  }, /*#__PURE__*/React.createElement(_reactNativeWebview.WebView, {
    injectedJavaScript: (0, _api.createGlobalFunctionsInWebviewContext)(),
    ref: onWebviewRefChange,
    onLoad: async event => {
      const {
        url,
        loading
      } = event.nativeEvent;
      if (url.startsWith(_constants.LOGIN_PAGE) && status === 'visible' && !loading) {
        (0, _api.removeThemeSwitcher)();
      }
    },
    style: styles.webview,
    source: {
      uri: _constants.LOGIN_PAGE
    },
    onNavigationStateChange: event => {
      if (event.url.startsWith(_constants.CHAT_PAGE) && event.loading && status === 'visible') {
        // We have successfully logged in. We can hide the webview now.
        onLoginCompleted();
        animateWebView('hide');
      }
    },
    userAgent: _constants.USER_AGENT,
    sharedCookiesEnabled: true,
    onContentProcessDidTerminate: () => {
      (0, _api.reloadWebView)();
    },
    onMessage: event => {
      try {
        const {
          payload,
          type
        } = JSON.parse(event.nativeEvent.data);
        if (type === 'REQUEST_INTERCEPTED_CONFIG') {
          if (Object.keys(payload)) {
            // We have headers
            const {
              headers
            } = payload;
            if (headers && 'Authorization' in headers) {
              const newAuthToken = headers === null || headers === void 0 ? void 0 : headers.Authorization;
              if (!!newAuthToken && newAuthToken !== accessToken) {
                onAccessTokenChange(newAuthToken);
                (0, _api.navigateToLoginPage)();
              }
            }
          }
        }
        if (type === 'RAW_ACCUMULATED_RESPONSE') {
          const result = (0, _parseStreamedGptResponse.default)(payload);
          if (result) {
            onAccumulatedResponse(result);
          }
        }
        if (type === 'CHAT_GPT_FULL_CAPACITY' && status === 'visible') {
          // Reload the page to check if it's available again.
          (0, _api.retryLogin)();
        }
        if (type === 'STREAM_ERROR') {
          const error = new _types.ChatGptError((0, _httpCodes.getStatusText)(payload === null || payload === void 0 ? void 0 : payload.status));
          error.statusCode = payload === null || payload === void 0 ? void 0 : payload.status;
          if (error.statusCode === 401) {
            // Token expired, notifying
            onAccessTokenChange('');
          } else if (error.statusCode === 403) {
            // CloudFare Session expired, reloading Web View
            (0, _api.reloadWebView)();
          }
          onStreamError(error);
        }
      } catch (e) {
        // Ignore errors here
      }
    }
  }), (renderCustomCloseIcon === null || renderCustomCloseIcon === void 0 ? void 0 : renderCustomCloseIcon(closeModal)) || /*#__PURE__*/React.createElement(_reactNative.View, {
    style: styles.closeButton
  }, /*#__PURE__*/React.createElement(_MaterialCommunityIcons.default, {
    name: "close",
    color: "black",
    size: 32,
    onPress: closeModal
  }))), /*#__PURE__*/React.createElement(_reactNative.Animated.View, {
    style: [styles.backdrop, animatedStyles.backdrop, {
      display: status === 'hidden' ? 'none' : 'flex'
    }, backdropStyles],
    pointerEvents: "none"
  }));
});
const styles = _reactNative.StyleSheet.create({
  backdrop: {
    ..._reactNative.StyleSheet.absoluteFillObject,
    backgroundColor: 'rgba(0, 0, 0, 0.5)'
  },
  container: {
    position: 'absolute',
    // Needed for Android to be on top of everything else
    elevation: 8,
    zIndex: 100,
    top: 96,
    left: 16,
    right: 16,
    bottom: 96,
    borderRadius: 16,
    overflow: 'hidden',
    flex: 1,
    shadowColor: 'black',
    shadowOffset: {
      width: 4,
      height: 4
    },
    shadowOpacity: 0.25,
    shadowRadius: 10
  },
  closeButton: {
    position: 'absolute',
    top: 16,
    right: 16
  },
  webview: {
    flex: 1,
    backgroundColor: 'white',
    borderRadius: 16
  }
});
var _default = ModalWebView;
exports.default = _default;
//# sourceMappingURL=ModalWebView.js.map