"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useChatGpt = exports.ChatGptProvider = void 0;
var _react = _interopRequireWildcard(require("react"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const ChatGptContext = /*#__PURE__*/(0, _react.createContext)(undefined);
const ChatGptProvider = _ref => {
  let {
    status,
    login,
    flush,
    sendMessage,
    children
  } = _ref;
  const contextValue = (0, _react.useMemo)(() => ({
    status,
    login,
    sendMessage,
    flush
  }), [status, login, sendMessage, flush]);
  return /*#__PURE__*/_react.default.createElement(ChatGptContext.Provider, {
    value: contextValue
  }, children);
};
exports.ChatGptProvider = ChatGptProvider;
const useChatGpt = () => {
  const context = (0, _react.useContext)(ChatGptContext);
  if (!context) {
    throw new Error('useChatGpt must be used within a ChatGptProvider');
  }
  return context;
};
exports.useChatGpt = useChatGpt;
//# sourceMappingURL=ChatGptContext.js.map